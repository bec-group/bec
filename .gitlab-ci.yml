# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.8
#commands to run in the Docker container before starting each job.
variables:
#   DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 0

services:
  - docker:18.09-dind
# different stages in the pipeline
stages:
  - Formatter
  - Test
formatter:
  stage: Formatter
  script:
    - pip install black
    - black --check --diff --color --line-length=100 ./
pytest:
  stage: Test
  script:
    - pip install pytest
    - pip install -e ./scan_server
    - cd scan_server/tests;pytest -v

integration test setup:
  stage: Test
  image: docker:20.10.16
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - docker-compose -f ./docker-compose.yaml up -d
    - apk update; apk upgrade; apk add curl; apk add git
    - apk update; apk upgrade; apk add git
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@git.psi.ch/bec_testbench/ophyd_devices.git

    - timeout 120 /bin/sh -c -- 'while true; do res=$(curl -X "GET" --max-time 3 "http://docker:3030/sessions"); if [ ! -z "$res" ]; then exit 0; fi; sleep 1; done;'
    - docker build -t init_scibec:test -f ./scibec/init_scibec/Dockerfile .
    - docker run --network=host --name init_scibec init_scibec:test
    - docker build -t scan_bundler:test -f ./scan_bundler/Dockerfile .
    - docker build -t scan_server:test -f ./scan_server/Dockerfile .
    - docker build -t device_server:test -f ./device_server/Dockerfile .

    - docker run --network=host -d --name device_server device_server:test 
    - docker run --network=host -d --name scan_server scan_server:test  
    - docker run --network=host -d --name scan_bundler scan_bundler:test 
    
    - docker build -t en2end_client:test -f ./bec_client/tests/Dockerfile .
    - docker run --network=host --name end2end_client en2end_client:test 
    
