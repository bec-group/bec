# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.8
#commands to run in the Docker container before starting each job.
variables:
  #   DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 0

# different stages in the pipeline
stages:
  - Formatter
  - RepoUpdates
  - Unittests
  - AdditionalTests
  - End2End
  - Deploy

.install-bec-services: &install-bec-services
    - pip install -e ./device_server
    - pip install -e ./scan_server
    - pip install -e ./scan_bundler
    - pip install -e ./bec_client
    - pip install -e ./file_writer
    - pip install -e ./scihub

formatter:
  stage: Formatter
  needs: []
  script:
    - pip install black
    - black --check --diff --color --line-length=100 ./
pylint:
  stage: Formatter
  needs: []
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir ./pylint
    - pylint ./bec_utils/bec_utils ./scan_server/scan_server ./device_server/device_server ./scan_bundler/scan_bundler ./bec_client/bec_client ./file_writer/file_writer --output-format=text . | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/
    expire_in: 1 week


repo_update:
  stage: RepoUpdates
  needs: []
  image: docker:20.10.16
  services:
    - docker:18.09-dind  
  script:
      # spin up redis, mongo and scibec
      - docker-compose -f ./ci/docker-compose.yaml up -d
      - apk update; apk upgrade; apk add curl; apk add git
      - git config --global user.name "ci_update_bot"
      - git config --global user.email "ci_update_bot@bec.ch"
      - git checkout ${CI_COMMIT_REF_NAME}
      - git reset --hard origin/${CI_COMMIT_REF_NAME}
      
      # make sure that the API server is healthy and ready
      - timeout 120 /bin/sh -c -- 'while true; do res=$(curl -X "GET" --max-time 3 "http://docker:3030/sessions"); if [ ! -z "$res" ]; then exit 0; fi; sleep 1; done;'      

      - curl -X "GET" "http://docker:3030/openapi.json" > ./scibec/openapi_schema.json

      - git status -uno
      - git add ./scibec/openapi_schema.json

      # exit if there are no changes
      - if [[ -z $(git status -uno --porcelain) ]]; then exit 0; fi
      - git commit -m 'ci update'
      - echo ${CI_COMMIT_REF_NAME}
      - git push -o ci.skip https://oauth2:$CI_UPDATES@gitlab.psi.ch/bec/bec.git ${CI_COMMIT_REF_NAME}

tests:
  stage: Unittests
  needs: ["repo_update"]
  script:
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install pytest pytest-random-order pytest-cov pytest-asyncio
    - *install-bec-services
    - coverage run --source=./bec_utils/bec_utils,./device_server/device_server,./scan_server/scan_server,./scan_bundler/scan_bundler,./bec_client/bec_client,./file_writer/file_writer --omit=*/bec_client/bec_client/plugins/*,*/bec_client/scripts/* -m pytest -v --junitxml=report.xml --random-order ./bec_utils/tests ./scan_server/tests ./device_server/tests ./scan_bundler/tests ./bec_client/tests/client_tests ./file_writer/tests
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      cobertura: coverage.xml

tests-3.9:
  stage: AdditionalTests
  image: python:3.9
  needs: ["tests"]
  allow_failure: true
  script: 
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices
    - pip install pytest pytest-random-order pytest-cov pytest-asyncio
    - *install-bec-services    
    - pytest -v --junitxml=report.xml --random-order ./bec_utils/tests ./scan_server/tests ./device_server/tests ./scan_bundler/tests ./bec_client/tests/client_tests ./file_writer/tests

tests-3.10:
  extends: "tests-3.9"
  stage: AdditionalTests
  image: python:3.10
  allow_failure: true

end-2-end:
  stage: End2End
  needs: []
  image: docker:20.10.16
  services:
    - docker:18.09-dind
  artifacts:
    when: on_failure
    paths:
      - ScanServer.log
      - ScanBundler.log
      - DeviceServer.log
      - BECClient.log
      - FileWriterManager.log
    expire_in: 1 week

  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production"'
  script:
    # spin up redis, mongo and scibec
    - docker-compose -f ./ci/docker-compose.yaml up -d
    - apk update; apk upgrade; apk add curl; apk add git

    # get ophyd devices repo (needed for the device_server)
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git

    # make sure that the API server is healthy and ready
    - timeout 120 /bin/sh -c -- 'while true; do res=$(curl -X "GET" --max-time 3 "http://docker:3030/sessions"); if [ ! -z "$res" ]; then exit 0; fi; sleep 1; done;'

    # initialize the database with the test config
    - docker build -t init_scibec:test -f ./scibec/init_scibec/Dockerfile .
    - docker run --network=host --name init_scibec init_scibec:test
    - docker build -t scihub:test -f ./scihub/Dockerfile .
    - docker run --network=host -d --name scihub scihub:test

    # build scan_bundler, scan_server, device_server and file_writer
    - docker build -t scan_bundler:test -f ./scan_bundler/Dockerfile .
    - docker build -t scan_server:test -f ./scan_server/Dockerfile .
    - docker build -t device_server:test -f ./device_server/Dockerfile .
    - docker build -t file_writer:test -f ./file_writer/Dockerfile .

    # run scan_bundler, scan_server, device_server and file_writer
    - docker run --network=host -d --name device_server device_server:test
    - docker run --network=host -d --name scan_server scan_server:test
    - docker run --network=host -d --name scan_bundler scan_bundler:test
    - docker run --network=host -d --name file_writer file_writer:test

    # build and run the tests
    - docker build -t en2end_client:test -f ./bec_client/tests/Dockerfile .
    - docker run --network=host --name end2end_client en2end_client:test

  after_script:
    # copy the log files to the project directory in order to be reachable by git artifacts
    - docker cp scan_server:/code/bec/scan_server/ScanServer.log $CI_PROJECT_DIR/ScanServer.log
    - docker cp scan_bundler:/code/bec/scan_bundler/ScanBundler.log $CI_PROJECT_DIR/ScanBundler.log
    - docker cp device_server:/code/bec/device_server/DeviceServer.log $CI_PROJECT_DIR/DeviceServer.log
    - docker cp file_writer:/code/bec/file_writer/FileWriterManager.log $CI_PROJECT_DIR/FileWriterManager.log
    - docker cp end2end_client:/code/bec/bec_client/BECClient.log $CI_PROJECT_DIR/BECClient.log

end-2-end-light:
  extends: "end-2-end"
  script:
    # spin up redis, mongo and scibec
    - docker run --network=host -d --name redis-test redis
    - apk update; apk upgrade; apk add git

    # get ophyd devices repo (needed for the device_server)
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git

    # initialize the database with the test config
    - docker build -t init_scibec:test -f ./scibec/init_scibec/Dockerfile .
    - docker run --network=host --name init_scibec init_scibec:test
    - docker build -t scihub:test -f ./scihub/Dockerfile .
    - docker run --network=host -d --name scihub scihub:test

    # build scan_bundler, scan_server, device_server and file_writer
    - docker build -t scan_bundler:test -f ./scan_bundler/Dockerfile .
    - docker build -t scan_server:test -f ./scan_server/Dockerfile .
    - docker build -t device_server:test -f ./device_server/Dockerfile .
    - docker build -t file_writer:test -f ./file_writer/Dockerfile .

    # run scan_bundler, scan_server, device_server and file_writer
    - docker run --network=host -d --name device_server device_server:test
    - docker run --network=host -d --name scan_server scan_server:test
    - docker run --network=host -d --name scan_bundler scan_bundler:test
    - docker run --network=host -d --name file_writer file_writer:test

    # build and run the tests
    - docker build -t en2end_client:test -f ./bec_client/tests/Dockerfile .
    - docker run --network=host --name end2end_client en2end_client:test  


pages:
  stage: Deploy
  needs: ["tests"]
  script:
    - git clone https://oauth2:$CI_OPHYD_DEVICES_KEY@gitlab.psi.ch/bec/ophyd_devices.git
    - export OPHYD_DEVICES_PATH=$PWD/ophyd_devices    
    - pip install -r ./docs/source/requirements.txt
    - *install-bec-services    
    - cd ./docs/source; make html
    - curl -X POST -d "branches=$CI_COMMIT_REF_NAME" -d "token=$RTD_TOKEN" https://readthedocs.org/api/v2/webhook/beamline-experiment-control/221870/
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "production"'
