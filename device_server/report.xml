<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="12" time="265.353" timestamp="2023-01-09T16:04:22.469591" hostname="Elitebook"><testcase classname="tests.test_device_manager_ds" name="test_disable_unreachable_devices" time="0.961" /><testcase classname="tests.test_device_manager_ds" name="test_conntect_device[obj0-True]" time="1.589" /><testcase classname="tests.test_device_manager_ds" name="test_device_init" time="2.141" /><testcase classname="tests.test_device_manager_ds" name="test_conntect_device[obj2-False]" time="2.879" /><testcase classname="tests.test_device_manager_ds" name="test_conntect_device[obj1-False]" time="3.538" /><testcase classname="tests.test_device_server" name="test_set_device[instr0]" time="4.641" /><testcase classname="tests.test_device_server" name="test_stage_device[instr2]" time="5.115" /><testcase classname="tests.test_device_server" name="test_read_device[instr1]" time="5.905" /><testcase classname="tests.test_device_server" name="test_read_device[instr0]" time="7.882" /><testcase classname="tests.test_device_server" name="test_stage_device[instr3]" time="7.283"><failure message="KeyError: 'abc'">instr = DeviceInstructionMessage(({'device': 'abc', 'action': "don't stage", 'parameter': {}}, {'stream': 'primary', 'DIID': 1})))

    @pytest.mark.parametrize(
        "instr",
        [
            BECMessage.DeviceInstructionMessage(
                device="samx",
                action="stage",
                parameter={},
                metadata={"stream": "primary", "DIID": 1},
            ),
            BECMessage.DeviceInstructionMessage(
                device=["samx", "samy"],
                action="stage",
                parameter={},
                metadata={"stream": "primary", "DIID": 1},
            ),
            BECMessage.DeviceInstructionMessage(
                device="ring_current_sim",
                action="stage",
                parameter={},
                metadata={"stream": "primary", "DIID": 1},
            ),
            BECMessage.DeviceInstructionMessage(
                device="abc",               # this tests fails because abc is not staged i think.
                action="don't stage",       # doesn't do anything dfferent, it works, maybe it shoudn't?
                parameter={},
                metadata={"stream": "primary", "DIID": 1},
            ),
        ],
    )
    def test_stage_device(instr):
        device_server = load_DeviceServerMock()
&gt;       device_server._stage_device(instr)

tests/test_device_server.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_device_server.DeviceServerMock object at 0x7f3e9ee3da50&gt;, instr = DeviceInstructionMessage(({'device': 'abc', 'action': "don't stage", 'parameter': {}}, {'stream': 'primary', 'DIID': 1})))

    def _stage_device(self, instr: BECMessage.DeviceInstructionMessage) -&gt; None:
        devices = instr.content["device"]
        if not isinstance(devices, list):
            devices = [devices]
    
        pipe = self.producer.pipeline()
        for dev in devices:
&gt;           obj = self.device_manager.devices[dev].obj
E           KeyError: 'abc'

device_server/device_server.py:406: KeyError</failure></testcase><testcase classname="tests.test_device_server" name="test_kickoff_device[instr0]" time="7.934" /><testcase classname="tests.test_device_server" name="test_trigger_device[instr0]" time="9.390" /><testcase time="0.000" /></testsuite></testsuites>